// Generated by CoffeeScript 1.6.3
(function() {
  var Chart, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.models = app.models || {};

  yamvc = window.yamvc;

  Chart = yamvc.Model.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Model.apply(this, all);
    return this;
  });

  Chart.prototype.init = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return yamvc.Model.prototype.init.apply(this, all);
  };

  Chart.prototype.initConfig = function() {
    var all, config, initOpts;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    initOpts = this.get('initOpts');
    initOpts.data = {
      type: 'AreaChart',
      title: 'Long term balance',
      isStacked: true,
      data: [['Day', 'Balance'], ['1', 0]]
    };
    config.namespace = 'balance';
    this.set('initOpts', initOpts);
    return yamvc.Model.prototype.initConfig.apply(this, all);
  };

  Chart.prototype.setRange = function(from, to) {
    this.set('from', from);
    return this.set('to', to);
  };

  Chart.prototype.load = function() {
    this.set('toLoad', 2);
    this.loadResources();
    this.loadExpenses();
    return this;
  };

  Chart.prototype.loadResources = function() {
    var db, incomes, me, q2;
    me = this;
    incomes = [];
    db = app.data.db.getConnection();
    q2 = db.from('incomes');
    return q2.list().done(function(records) {
      var i, l;
      i = 0;
      l = records.length;
      while (i < l) {
        incomes.push({
          date: records[i].date,
          value: parseFloat(records[i].value)
        });
        i++;
      }
      me.set('incomes', incomes);
      me.set('toLoad', me.get('toLoad') - 1);
      if (me.get('toLoad') === 0) {
        return me.recalculate.call(me);
      }
    });
  };

  Chart.prototype.loadExpenses = function() {
    var db, expenses, me, q2;
    me = this;
    expenses = [];
    db = app.data.db.getConnection();
    q2 = db.from('expenses');
    return q2.list().done(function(records) {
      var i, l;
      i = 0;
      l = records.length;
      while (i < l) {
        expenses.push({
          date: records[i].date,
          value: -parseFloat(records[i].value)
        });
        i++;
      }
      me.set('expenses', expenses);
      me.set('toLoad', me.get('toLoad') - 1);
      if (me.get('toLoad') === 0) {
        return me.recalculate.call(me);
      }
    });
  };

  Chart.prototype.recalculate = function() {
    var balance, chartsData, date, dateTime, i, l, now, operation, time;
    now = new Date();
    time = now.getTime();
    chartsData = [['Day', 'Balance']];
    balance = 0;
    operation = this.get('incomes');
    operation = operation.concat(this.get('expenses'));
    operation.sort(function(a, b) {
      return a.date - b.date;
    });
    i = 0;
    l = operation.length;
    while (i < l) {
      balance += operation[i].value;
      date = new Date(operation[i].date);
      dateTime = date.getTime();
      if ((dateTime + 31 * 24 * 60 * 60 * 1000) > time) {
        chartsData.push([date.getDate() + '/' + (date.getMonth() + 1), balance]);
      }
      i++;
    }
    if (chartsData.length === 1) {
      chartsData.push([0, 0]);
    }
    return this.$set('data', chartsData);
  };

  app.models.chart = new Chart;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Chart.map
*/

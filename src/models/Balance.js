// Generated by CoffeeScript 1.6.3
(function() {
  var Balance, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.models = app.models || {};

  yamvc = window.yamvc;

  Balance = yamvc.Model.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Model.apply(this, all);
    return this;
  });

  Balance.prototype.init = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return yamvc.Model.prototype.init.apply(this, all);
  };

  Balance.prototype.initConfig = function() {
    var all, config, currentDate, initOpts;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    initOpts = this.get('initOpts');
    initOpts.data = {
      resources: 0,
      expenses: 0,
      available: 0
    };
    currentDate = new Date();
    this.set('from', 1 + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear());
    this.set('to', currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear());
    config.namespace = 'balance';
    this.set('initOpts', initOpts);
    return yamvc.Model.prototype.initConfig.apply(this, all);
  };

  Balance.prototype.setRange = function(from, to) {
    this.set('from', from);
    return this.set('to', to);
  };

  Balance.prototype.load = function() {
    this.set('toLoad', 2);
    this.loadResources();
    this.loadExpenses();
    return this;
  };

  Balance.prototype.loadResources = function() {
    var db, me, q, resources, to;
    me = this;
    resources = 0;
    to = new Date(app.logic.Date.parse(this.get('to')));
    db = app.data.db.getConnection();
    q = db.from('incomes');
    return q.where('date', '<', to.getTime() + 24 * 60 * 60 * 1000).list().done(function(records) {
      var i, l;
      i = 0;
      l = records.length;
      while (i < l) {
        resources += parseFloat(records[i].value);
        i++;
      }
      me.$set('resources', resources);
      me.set('toLoad', me.get('toLoad') - 1);
      if (me.get('toLoad') === 0) {
        return me.recalculate.call(me);
      }
    });
  };

  Balance.prototype.loadExpenses = function() {
    var currentMonthExpenses, dayInMonth, db, expenses, from, me, now, q2, to;
    me = this;
    expenses = 0;
    currentMonthExpenses = 0;
    now = new Date();
    dayInMonth = now.getDate() * 24 * 60 * 60 * 1000;
    from = new Date(app.logic.Date.parse(this.get('from')));
    to = new Date(app.logic.Date.parse(this.get('to')));
    db = app.data.db.getConnection();
    q2 = db.from('expenses');
    return q2.where('date', '<', to.getTime() + 24 * 60 * 60 * 1000).list().done(function(records) {
      var i, l, val;
      i = 0;
      l = records.length;
      while (i < l) {
        val = parseFloat(records[i].value);
        expenses -= val;
        if ((records[i].date + dayInMonth) > now.getTime()) {
          currentMonthExpenses -= val;
        }
        i++;
      }
      me.$set('expenses', expenses);
      me.$set('currentMonthExpenses', currentMonthExpenses);
      me.set('toLoad', me.get('toLoad') - 1);
      if (me.get('toLoad') === 0) {
        return me.recalculate.call(me);
      }
    });
  };

  Balance.prototype.recalculate = function() {
    this.$set('available', this.$get('resources') + this.$get('expenses'));
    return this.$set('currentMonthResources', this.$get('resources') + (this.$get('expenses') - this.$get('currentMonthExpenses')));
  };

  Balance.prototype.all = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  Balance.prototype.getBalance = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  app.models.balance = new Balance;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Balance.map
*/

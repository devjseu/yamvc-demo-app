/*! culturalMe v1.0.0 - 2013-12-16 
 *  License:  */
// Generated by CoffeeScript 1.6.3
(function() {
  var Db, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.data = app.data || {};

  yamvc = window.yamvc;

  Db = yamvc.Core.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Core.apply(this, all);
    return this;
  });

  Db.prototype.init = function() {
    var all, config, opts;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Core.prototype.init.apply(this, all);
    opts = all[0] || {};
    config = opts.config || {};
    this.set('initOpts', opts);
    this.set('config', config);
    this.initConfig();
    if (!this.getName) {
      throw new Error('Database name should be set');
    }
  };

  Db.prototype.connect = function() {
    if (!this.get('connect')) {
      this.set('connect', new ydn.db.Storage(this.getName(), this.getSchema()));
    }
    return this;
  };

  Db.prototype.close = function() {
    this.getConnection().close();
    this.set('connect', null);
    return this;
  };

  Db.prototype.getConnection = function() {
    if (!this.get('connect')) {
      this.connect();
    }
    return this.get('connect');
  };

  Db.prototype.clear = function() {
    return this.getConnection().clear();
  };

  app.data.Db = Db;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Db.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var YdnDb, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.data = app.data || {};

  app.data.proxy = app.data.proxy || {};

  yamvc = window.yamvc;

  YdnDb = yamvc.Core.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Core.apply(this, all);
    return this;
  });

  YdnDb.prototype.init = function() {
    var all, config, opts;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    opts = all[0] || {};
    config = opts.config || {};
    config.idProperty = 'id';
    this.set('initOpts', opts);
    this.set('config', config);
    this.initConfig();
    return this;
  };

  YdnDb.prototype.getStatus = function() {
    return this.get('status');
  };

  YdnDb.prototype.getResponse = function() {
    return this.get('response');
  };

  YdnDb.prototype.read = function(namespace, data, callback) {
    var $set, idProperty, req;
    idProperty = this.getIdProperty();
    if (typeof data[idProperty] === 'object') {
      console.log(idProperty);
    }
    $set = this.set.bind(this);
    req = this.getDb().getConnection().get(namespace, data[idProperty]);
    req.done(function(key) {
      $set('status', 'success');
      data[idProperty] = key;
      $set('response', data);
      return callback();
    });
    req.fail(function(e) {
      $set('status', 'error');
      $set('response', e);
      return callback();
    });
    return this;
  };

  YdnDb.prototype.create = function(namespace, data, callback) {
    var $set, idProperty, req;
    $set = this.set.bind(this);
    idProperty = this.getIdProperty();
    req = this.getDb().getConnection().put({
      name: namespace,
      keyPath: idProperty
    }, data);
    req.done(function(key) {
      $set('status', 'success');
      data[idProperty] = key;
      $set('response', data);
      return callback();
    });
    req.fail(function(e) {
      $set('status', 'error');
      $set('response', e);
      return callback();
    });
    return this;
  };

  YdnDb.prototype.update = function(namespace, data, callback) {
    var $set, req;
    $set = this.set.bind(this);
    req = this.getDb().getConnection().put(namespace, data);
    req.done(function() {
      $set('status', 'success');
      $set('response', data);
      return callback();
    });
    req.fail(function(e) {
      $set('status', 'error');
      $set('response', e);
      return callback();
    });
    return this;
  };

  YdnDb.prototype.destroy = function(namespace, data, callback) {
    var $set, idProperty, req;
    idProperty = this.getIdProperty();
    if (typeof data[idProperty] === 'object') {
      console.log(idProperty);
    }
    $set = this.set.bind(this);
    req = this.getDb().getConnection().remove(namespace, data[idProperty]);
    req.done(function() {
      $set('status', 'success');
      $set('response', {});
      return callback();
    });
    req.fail(function(e) {
      $set('status', 'error');
      $set('response', e);
      return callback();
    });
    return this;
  };

  app.data.proxy.YdnDb = YdnDb;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=ydnDb.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var app, yamvc;

  app = window.app || {};

  yamvc = window.yamvc;

  app.init = function() {
    app.layout = new app.views.Layout({
      config: {
        autoCreate: true,
        tpl: 'tpl-layout',
        renderTo: '#container'
      }
    });
    app.controlles = {
      main: new yamvc.Controller({
        config: {
          name: 'Main',
          views: {
            layout: app.layout
          },
          events: {
            $layout: {
              render: function() {
                return setTimeout(function() {
                  return app.mask.hide();
                }, 500);
              }
            }
          }
        }
      })
    };
    return this;
  };

  window.app = app;

  yamvc.onReady(app.init);

}).call(this);

/*
//@ sourceMappingURL=main.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Balance, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.models = app.models || {};

  yamvc = window.yamvc;

  Balance = yamvc.Model.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Model.apply(this, all);
    return this;
  });

  Balance.prototype.init = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return yamvc.Model.prototype.init.apply(this, all);
  };

  Balance.prototype.initConfig = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    config.namespace = 'balance';
    return yamvc.Model.prototype.initConfig.apply(this, all);
  };

  Balance.prototype.setRange = function(from, to) {};

  Balance.prototype.load = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  Balance.prototype.recaulculate = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  Balance.prototype.all = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  Balance.prototype.getBalance = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  app.models.balance = new Balance;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Balance.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Incomes, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.models = app.models || {};

  yamvc = window.yamvc;

  Incomes = yamvc.Model.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Model.apply(this, all);
    return this;
  });

  Incomes.prototype.init = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return yamvc.Model.prototype.init.apply(this, all);
  };

  Incomes.prototype.initConfig = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    config.namespace = 'incomes';
    return yamvc.Model.prototype.initConfig.apply(this, all);
  };

  app.models.Incomes = Incomes;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Incomes.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Bar, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Bar = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  Bar.prototype.init = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.prototype.init.apply(this, all);
    config = this.get('config');
    config.views = {
      buttonExpense: new app.views.Button({
        config: {
          tpl: 'tpl-button',
          renderTo: '.add-expense',
          models: {
            locale: new yamvc.Model({
              config: {
                namespace: 'locale'
              },
              data: {
                text: 'Add Expense'
              }
            })
          }
        }
      }),
      buttonIncome: new app.views.Button({
        config: {
          tpl: 'tpl-button',
          renderTo: '.add-income',
          models: {
            locale: new yamvc.Model({
              config: {
                namespace: 'locale'
              },
              data: {
                text: 'Add Income'
              }
            })
          }
        }
      })
    };
    return console.log(config);
  };

  app.views.Bar = Bar;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Bar.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Balance, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Balance = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  Balance.prototype.init = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.prototype.init.apply(this, all);
    this.bindEvents();
    return this;
  };

  Balance.prototype.bindEvents = function() {
    this.addListener('render', this.bindElements.bind(this));
    this.addListener('render', this.ajustBarsWidth.bind(this));
    this.addListener('modelResourcesChange', this.updateBalance.bind(this));
    this.addListener('modelExpensesChange', this.updateBalance.bind(this));
    return this;
  };

  Balance.prototype.bindElements = function() {
    this.set('$resources', this.queryEl('.bar-balance-resources'));
    this.set('$expenses', this.queryEl('.bar-balance-expenses'));
    return this;
  };

  Balance.prototype.updateBalance = function() {
    this.recalculateModel();
    this.partialRender('.bar-balance-resources');
    this.partialRender('.bar-balance-expenses');
    this.partialRender('.bar-balance-current');
    this.ajustBarsWidth();
    return this;
  };

  Balance.prototype.ajustBarsWidth = function() {
    var expenses, expensesLeft, expensesWidth, resources, resourcesLeft, resourcesWidth;
    expenses = this.getModel('balance').$get('expenses');
    resources = this.getModel('balance').$get('resources');
    if (expenses === 0 && resources === 0) {
      expensesWidth = 0;
      resourcesWidth = 100;
      expensesLeft = 0;
      resourcesLeft = 0;
    } else if (expenses >= resources) {
      expensesWidth = 100;
      resourcesWidth = 0;
      expensesLeft = 0;
      resourcesLeft = 0;
    } else {
      expensesWidth = expenses === 0 ? 0 : parseInt(expenses / (resources / 100));
      resourcesWidth = 100 - expensesWidth;
      expensesLeft = 0;
      resourcesLeft = expensesWidth;
    }
    this.get('$resources').style.width = resourcesWidth + "%";
    this.get('$resources').style.left = resourcesLeft + "%";
    this.get('$expenses').style.width = expensesWidth + "%";
    return this.get('$expenses').style.left = expensesLeft + "%";
  };

  Balance.prototype.recalculateModel = function() {
    return this.getModel('balance').calculateBalance();
  };

  app.views.BarBalance = Balance;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Balance.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Button, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Button = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  app.views.Button = Button;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Button.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Layout, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Layout = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  Layout.prototype.init = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.prototype.init.apply(this, all);
    config = this.get('config');
    return config.views = {
      barBalance: new app.views.BarBalance({
        config: {
          id: 'current-balance',
          tpl: 'tpl-bar-balance',
          renderTo: '.balance-container',
          models: {
            locale: new yamvc.Model({
              config: {
                namespace: 'locale'
              },
              data: {
                legend: 'Legend',
                expenses: 'expenses',
                resources: 'resources',
                currentBalance: 'Current balance'
              }
            }),
            balance: new yamvc.Model({
              config: {
                namespace: 'balance'
              },
              data: {
                resources: 0,
                expenses: 0,
                expectation: 0
              }
            })
          }
        }
      }),
      barActions: new app.views.Bar({
        config: {
          id: 'action-bar',
          tpl: 'tpl-bar-action',
          renderTo: '.layout-action-bar'
        }
      })
    };
  };

  app.views.Layout = Layout;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Layout.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Mask, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Mask = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  Mask.prototype.show = function() {
    var style;
    style = this.get('el').style;
    return style.display = 'table';
  };

  Mask.prototype.hide = function() {
    var style;
    style = this.get('el').style;
    return style.display = 'none';
  };

  app.views.Mask = Mask;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Mask.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Menu, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Menu = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  Menu.prototype.init = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.prototype.init.apply(this, all);
    config = this.get('config');
    config.views = {
      buttonIncomes: new app.views.Button({
        config: {
          tpl: 'tpl-button',
          renderTo: '.',
          models: {
            locale: new yamvc.Model({
              config: {
                namespace: 'locale'
              },
              data: {
                text: 'List all incomes'
              }
            })
          }
        }
      }),
      buttonExpenses: new app.views.Button({
        config: {
          tpl: 'tpl-button',
          renderTo: '.',
          models: {
            locale: new yamvc.Model({
              config: {
                namespace: 'locale'
              },
              data: {
                text: 'List all expenses'
              }
            })
          }
        }
      })
    };
    return console.log(config);
  };

  app.views.Bar = Bar;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Menu.map
*/

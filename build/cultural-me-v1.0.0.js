/*! cultural-me v1.0.0 - 2013-12-17 
 *  License:  */
// Generated by CoffeeScript 1.6.3
(function() {
  var Db, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.data = app.data || {};

  yamvc = window.yamvc;

  Db = yamvc.Core.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Core.apply(this, all);
    return this;
  });

  Db.prototype.init = function() {
    var all, config, opts;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Core.prototype.init.apply(this, all);
    opts = all[0] || {};
    config = opts.config || {};
    this.set('initOpts', opts);
    this.set('config', config);
    this.initConfig();
    if (!this.getName) {
      throw new Error('Database name should be set');
    }
  };

  Db.prototype.connect = function() {
    if (!this.get('connect')) {
      this.set('connect', new ydn.db.Storage(this.getName(), this.getSchema()));
    }
    return this;
  };

  Db.prototype.close = function() {
    this.getConnection().close();
    this.set('connect', null);
    return this;
  };

  Db.prototype.getConnection = function() {
    if (!this.get('connect')) {
      this.connect();
    }
    return this.get('connect');
  };

  Db.prototype.clear = function() {
    return this.getConnection().clear();
  };

  app.data.Db = Db;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Db.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var YdnDb, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.data = app.data || {};

  app.data.proxy = app.data.proxy || {};

  yamvc = window.yamvc;

  YdnDb = yamvc.Core.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Core.apply(this, all);
    return this;
  });

  YdnDb.prototype.init = function() {
    var all, config, opts;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    opts = all[0] || {};
    config = opts.config || {};
    config.idProperty = 'id';
    this.set('initOpts', opts);
    this.set('config', config);
    this.initConfig();
    return this;
  };

  YdnDb.prototype.getStatus = function() {
    return this.get('status');
  };

  YdnDb.prototype.getResponse = function() {
    return this.get('response');
  };

  YdnDb.prototype.read = function(namespace, data, callback) {
    var $set, idProperty, req;
    idProperty = this.getIdProperty();
    if (typeof data[idProperty] === 'object') {
      console.log(idProperty);
    }
    $set = this.set.bind(this);
    req = this.getDb().getConnection().get(namespace, data[idProperty]);
    req.done(function(key) {
      $set('status', 'success');
      data[idProperty] = key;
      $set('response', data);
      return callback();
    });
    req.fail(function(e) {
      $set('status', 'error');
      $set('response', e);
      return callback();
    });
    return this;
  };

  YdnDb.prototype.create = function(namespace, data, callback) {
    var $set, idProperty, req;
    $set = this.set.bind(this);
    idProperty = this.getIdProperty();
    req = this.getDb().getConnection().put({
      name: namespace,
      keyPath: idProperty
    }, data);
    req.done(function(key) {
      $set('status', 'success');
      data[idProperty] = key;
      $set('response', data);
      return callback();
    });
    req.fail(function(e) {
      $set('status', 'error');
      $set('response', e);
      return callback();
    });
    return this;
  };

  YdnDb.prototype.update = function(namespace, data, callback) {
    var $set, req;
    $set = this.set.bind(this);
    req = this.getDb().getConnection().put(namespace, data);
    req.done(function() {
      $set('status', 'success');
      $set('response', data);
      return callback();
    });
    req.fail(function(e) {
      $set('status', 'error');
      $set('response', e);
      return callback();
    });
    return this;
  };

  YdnDb.prototype.destroy = function(namespace, data, callback) {
    var $set, idProperty, req;
    idProperty = this.getIdProperty();
    if (typeof data[idProperty] === 'object') {
      console.log(idProperty);
    }
    $set = this.set.bind(this);
    req = this.getDb().getConnection().remove(namespace, data[idProperty]);
    req.done(function() {
      $set('status', 'success');
      $set('response', {});
      return callback();
    });
    req.fail(function(e) {
      $set('status', 'error');
      $set('response', e);
      return callback();
    });
    return this;
  };

  app.data.proxy.YdnDb = YdnDb;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=ydnDb.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var DateHelper, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.logic = app.logic || {};

  yamvc = window.yamvc;

  DateHelper = yamvc.Core.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Core.apply(this, all);
    return this;
  });

  DateHelper.prototype.daysInMonth = function(month, year) {
    return new Date(year, month, 0).getDate();
  };

  DateHelper.prototype.daysAgo = function(from, days) {
    return new Date(+new Date(from) - days * 24 * 60 * 60 * 1000);
  };

  DateHelper.prototype.parse = function(str) {
    var d, m, matchesNonPadded, matchesPadded, pad;
    pad = function(x) {
      var _ref;
      return ((_ref = ('' + x).length === 2) != null ? _ref : {
        '': '0'
      }) + x;
    };
    m = str.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
    d = m ? new Date(m[3], m[2] - 1, m[1]) : null;
    matchesPadded = d && (str === [pad(d.getDate()), pad(d.getMonth() + 1), d.getFullYear()].join('/'));
    matchesNonPadded = d && (str === [d.getDate(), d.getMonth() + 1, d.getFullYear()].join('/'));
    if (matchesPadded || matchesNonPadded) {
      return d;
    } else {
      return null;
    }
  };

  app.logic.Date = new DateHelper;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Date.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var app, yamvc;

  app = window.app || {};

  yamvc = window.yamvc;

  app.init = function() {
    app.data.db = new app.data.Db({
      config: {
        name: 'culturalMe',
        schema: {
          stores: [
            {
              name: 'incomes',
              keyPath: 'id',
              autoIncrement: true,
              indexes: [
                {
                  keyPath: 'date'
                }
              ]
            }, {
              name: 'expenses',
              keyPath: 'id',
              autoIncrement: true,
              indexes: [
                {
                  keyPath: 'date'
                }
              ]
            }
          ]
        }
      }
    });
    app.views.layout = new app.views.Layout({
      config: {
        id: 'layout',
        tpl: 'tpl-layout',
        renderTo: '#container'
      }
    });
    app.views.layout2 = new app.views.Layout2({
      config: {
        id: 'layout-2',
        tpl: 'tpl-layout-2',
        renderTo: '#container'
      }
    });
    app.views.income = new app.views.form.AddIncome({
      config: {
        id: 'add-income',
        tpl: 'tpl-window',
        renderTo: 'body'
      }
    });
    app.views.income.render();
    app.views.expense = new app.views.form.AddExpense({
      config: {
        id: 'add-expense',
        tpl: 'tpl-window',
        renderTo: 'body'
      }
    });
    app.views.expense.render();
    app.controlles = {
      main: new yamvc.Controller({
        config: {
          name: 'Main',
          views: {
            "layout": app.views.layout,
            "layout-2": app.views.layout2
          },
          routes: {
            "": 'home',
            "show-expenses": 'showExpenses',
            "show-incomes": 'showIncomes'
          },
          events: {
            "$layout": {
              render: function() {
                app.models.balance.load();
                return setTimeout(function() {
                  return app.mask.hide();
                }, 500);
              },
              show: function() {
                return setTimeout(function() {
                  return app.mask.hide();
                }, 500);
              }
            },
            "$layout-2": {
              render: function() {
                console.log('test');
                return setTimeout(function() {
                  return app.mask.hide();
                }, 500);
              },
              show: function() {
                return setTimeout(function() {
                  return app.mask.hide();
                }, 500);
              }
            },
            '.add-expense a': {
              click: function(view, e) {
                e.preventDefault();
                return this.onExpenseBtnClick();
              }
            },
            '.add-income a': {
              click: function(view, e) {
                e.preventDefault();
                return this.onIncomeBtnClick();
              }
            },
            '.layout-2-action-bar .button': {
              click: function(view, e) {
                e.preventDefault();
                return this.onBackBtnClick();
              }
            },
            '[yamvc-id="list-incomes"] a': {
              click: function(view, e) {
                e.preventDefault();
                return this.onListIncomesBtnClick();
              }
            },
            '[yamvc-id="list-expenses"] a': {
              click: function(view, e) {
                e.preventDefault();
                return this.onListExpensesBtnClick();
              }
            }
          }
        },
        onBackBtnClick: function() {
          return this.redirectTo('');
        },
        onExpenseBtnClick: function() {
          return yamvc.ViewManager.get('add-expense').show();
        },
        onIncomeBtnClick: function() {
          return yamvc.ViewManager.get('add-income').show();
        },
        onListIncomesBtnClick: function() {
          app.mask.show();
          return this.redirectTo('show-incomes');
        },
        onListExpensesBtnClick: function() {
          app.mask.show();
          return this.redirectTo('show-expenses');
        },
        home: function() {
          app.views.layout2.hide();
          if (app.views.layout.isInDOM()) {
            return app.views.layout.show();
          } else {
            return app.views.layout.render();
          }
        },
        showExpenses: function() {
          app.views.layout.hide();
          if (app.views.layout2.isInDOM()) {
            app.views.layout2.show();
            app.views.layout2.getChild('expenses').getModel('expenses').load();
          } else {
            app.views.layout2.render();
          }
          app.views.layout2.getChild('incomes').hide();
          return app.views.layout2.getChild('expenses').show();
        },
        showIncomes: function() {
          app.views.layout.hide();
          if (app.views.layout2.isInDOM()) {
            app.views.layout2.show();
            app.views.layout2.getChild('incomes').getModel('incomes').load();
          } else {
            app.views.layout2.render();
          }
          app.views.layout2.getChild('incomes').show();
          return app.views.layout2.getChild('expenses').hide();
        }
      })
    };
    return this;
  };

  window.app = app;

  yamvc.onReady(app.init);

}).call(this);

/*
//@ sourceMappingURL=main.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Balance, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.models = app.models || {};

  yamvc = window.yamvc;

  Balance = yamvc.Model.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Model.apply(this, all);
    return this;
  });

  Balance.prototype.init = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return yamvc.Model.prototype.init.apply(this, all);
  };

  Balance.prototype.initConfig = function() {
    var all, config, currentDate, initOpts;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    initOpts = this.get('initOpts');
    initOpts.data = {
      resources: 0,
      expenses: 0,
      available: 0
    };
    currentDate = new Date();
    this.set('from', 1 + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear());
    this.set('to', currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear());
    config.namespace = 'balance';
    this.set('initOpts', initOpts);
    return yamvc.Model.prototype.initConfig.apply(this, all);
  };

  Balance.prototype.setRange = function(from, to) {
    this.set('from', from);
    return this.set('to', to);
  };

  Balance.prototype.load = function() {
    this.set('toLoad', 2);
    this.loadResources();
    this.loadExpenses();
    return this;
  };

  Balance.prototype.loadResources = function() {
    var db, from, me, q, resources, to;
    me = this;
    resources = 0;
    from = new Date(app.logic.Date.parse(this.get('from')));
    to = new Date(app.logic.Date.parse(this.get('to')));
    db = app.data.db.getConnection();
    q = db.from('incomes');
    return q.where('date', '>=', from.getTime(), '<', to.getTime() + 24 * 60 * 60 * 1000).list().done(function(records) {
      var i, l;
      i = 0;
      l = records.length;
      while (i < l) {
        resources += parseFloat(records[i].value);
        i++;
      }
      me.$set('resources', resources);
      me.set('toLoad', me.get('toLoad') - 1);
      if (me.get('toLoad') === 0) {
        return me.recalculate.call(me);
      }
    });
  };

  Balance.prototype.loadExpenses = function() {
    var db, expenses, from, me, q2, to;
    me = this;
    expenses = 0;
    from = new Date(app.logic.Date.parse(this.get('from')));
    to = new Date(app.logic.Date.parse(this.get('to')));
    db = app.data.db.getConnection();
    q2 = db.from('expenses');
    return q2.where('date', '>=', from.getTime(), '<', to.getTime() + 24 * 60 * 60 * 1000).list().done(function(records) {
      var i, l;
      i = 0;
      l = records.length;
      while (i < l) {
        expenses -= parseFloat(records[i].value);
        i++;
      }
      me.$set('expenses', expenses);
      me.set('toLoad', me.get('toLoad') - 1);
      if (me.get('toLoad') === 0) {
        return me.recalculate.call(me);
      }
    });
  };

  Balance.prototype.recalculate = function() {
    return this.$set('available', this.$get('resources') + this.$get('expenses'));
  };

  Balance.prototype.all = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  Balance.prototype.getBalance = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  };

  app.models.balance = new Balance;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Balance.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Chart, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.models = app.models || {};

  yamvc = window.yamvc;

  Chart = yamvc.Model.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Model.apply(this, all);
    return this;
  });

  Chart.prototype.init = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return yamvc.Model.prototype.init.apply(this, all);
  };

  Chart.prototype.initConfig = function() {
    var all, config, initOpts;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    initOpts = this.get('initOpts');
    initOpts.data = {
      type: 'AreaChart',
      title: 'Long term balance',
      isStacked: true,
      data: [['Day', 'Balance'], ['1', 0]]
    };
    config.namespace = 'balance';
    this.set('initOpts', initOpts);
    return yamvc.Model.prototype.initConfig.apply(this, all);
  };

  Chart.prototype.setRange = function(from, to) {
    this.set('from', from);
    return this.set('to', to);
  };

  Chart.prototype.load = function() {
    this.set('toLoad', 2);
    this.loadResources();
    this.loadExpenses();
    return this;
  };

  Chart.prototype.loadResources = function() {
    var db, incomes, me, q2;
    me = this;
    incomes = [];
    db = app.data.db.getConnection();
    q2 = db.from('incomes');
    return q2.list().done(function(records) {
      var i, l;
      i = 0;
      l = records.length;
      while (i < l) {
        incomes.push({
          date: records[i].date,
          value: parseFloat(records[i].value)
        });
        i++;
      }
      me.set('incomes', incomes);
      me.set('toLoad', me.get('toLoad') - 1);
      if (me.get('toLoad') === 0) {
        return me.recalculate.call(me);
      }
    });
  };

  Chart.prototype.loadExpenses = function() {
    var db, expenses, me, q2;
    me = this;
    expenses = [];
    db = app.data.db.getConnection();
    q2 = db.from('expenses');
    return q2.list().done(function(records) {
      var i, l;
      i = 0;
      l = records.length;
      while (i < l) {
        expenses.push({
          date: records[i].date,
          value: -parseFloat(records[i].value)
        });
        i++;
      }
      me.set('expenses', expenses);
      me.set('toLoad', me.get('toLoad') - 1);
      if (me.get('toLoad') === 0) {
        return me.recalculate.call(me);
      }
    });
  };

  Chart.prototype.recalculate = function() {
    var balance, chartsData, date, dateTime, i, l, now, operation, time;
    now = new Date();
    time = now.getTime();
    chartsData = [['Day', 'Balance']];
    balance = 0;
    operation = this.get('incomes');
    operation = operation.concat(this.get('expenses'));
    operation.sort(function(a, b) {
      return a.date - b.date;
    });
    i = 0;
    l = operation.length;
    while (i < l) {
      balance += operation[i].value;
      date = new Date(operation[i].date);
      dateTime = date.getTime();
      if ((dateTime + 31 * 24 * 60 * 60 * 1000) > time) {
        chartsData.push([date.getDate() + '/' + (date.getMonth() + 1), balance]);
      }
      i++;
    }
    return this.$set('data', chartsData);
  };

  app.models.chart = new Chart;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Chart.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Expense, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.models = app.models || {};

  yamvc = window.yamvc;

  Expense = yamvc.Model.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Model.apply(this, all);
    return this;
  });

  Expense.prototype.init = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return yamvc.Model.prototype.init.apply(this, all);
  };

  Expense.prototype.initConfig = function() {
    var all, config, opts;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    opts = this.get('initOpts');
    config.namespace = 'expenses';
    opts.data = opts.data || {};
    opts.data.date = opts.data.date || +(new Date);
    return yamvc.Model.prototype.initConfig.apply(this, all);
  };

  app.models.Expense = Expense;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Expense.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Income, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.models = app.models || {};

  yamvc = window.yamvc;

  Income = yamvc.Model.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Model.apply(this, all);
    return this;
  });

  Income.prototype.init = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return yamvc.Model.prototype.init.apply(this, all);
  };

  Income.prototype.initConfig = function() {
    var all, config, opts;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    opts = this.get('initOpts');
    config.namespace = 'incomes';
    opts.data = opts.data || {};
    opts.data.date = opts.data.date || +(new Date);
    return yamvc.Model.prototype.initConfig.apply(this, all);
  };

  app.models.Income = Income;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Income.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Table, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.models = app.models || {};

  yamvc = window.yamvc;

  Table = yamvc.Model.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.Model.apply(this, all);
    return this;
  });

  Table.prototype.init = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return yamvc.Model.prototype.init.apply(this, all);
  };

  Table.prototype.initConfig = function() {
    var all, config, initOpts;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    initOpts = this.get('initOpts');
    initOpts.data = {
      data: []
    };
    return yamvc.Model.prototype.initConfig.apply(this, all);
  };

  Table.prototype.setCondition = function() {
    var obj;
    obj = [
      {
        property: 'date',
        conditions: [
          {
            condition: '>',
            value: new Date().getTime() - 30 * 24 * 60 * 60 * 1000
          }, {
            condition: '<',
            value: new Date().getTime()
          }
        ]
      }
    ];
    return this.set('conditions', obj);
  };

  Table.prototype.setOrder = function(property, desc) {
    return this.set('order', {
      property: property,
      desc: desc
    });
  };

  Table.prototype.load = function() {
    var db, me, q;
    me = this;
    this.setCondition();
    this.setOrder('date', true);
    db = app.data.db.getConnection();
    q = db.from(this.getNamespace());
    q = this.addCondition(q);
    q = this.addOrder(q);
    q.list().done(function(records) {
      return me.$set('data', records);
    });
    return this;
  };

  Table.prototype.addCondition = function(q) {
    this.get('conditions').forEach(function(condition) {
      var conditionQuery;
      conditionQuery = [condition.property];
      condition.conditions.forEach(function(_condition) {
        conditionQuery.push(_condition.condition);
        return conditionQuery.push(_condition.value);
      });
      return q.where.apply(q, conditionQuery);
    });
    return q;
  };

  Table.prototype.addOrder = function(q) {
    var order;
    order = this.get('order');
    if (!order.desc) {
      return q.order(order.property);
    } else {
      return q.order(order.property).reverse();
    }
  };

  app.models.Table = Table;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Table.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Bar, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Bar = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  Bar.prototype.init = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.prototype.init.apply(this, all);
    config = this.get('config');
    return config.views = {
      buttonExpense: new app.views.Button({
        config: {
          tpl: 'tpl-button',
          renderTo: '.add-expense',
          models: {
            locale: new yamvc.Model({
              config: {
                namespace: 'locale'
              },
              data: {
                text: 'Add Expense'
              }
            })
          }
        }
      }),
      buttonIncome: new app.views.Button({
        config: {
          tpl: 'tpl-button',
          renderTo: '.add-income',
          models: {
            locale: new yamvc.Model({
              config: {
                namespace: 'locale'
              },
              data: {
                text: 'Add Income'
              }
            })
          }
        }
      })
    };
  };

  app.views.Bar = Bar;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Bar.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Balance, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Balance = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  Balance.prototype.init = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.prototype.init.apply(this, all);
    this.bindEvents();
    return this;
  };

  Balance.prototype.bindEvents = function() {
    this.addListener('render', this.bindElements.bind(this));
    this.addListener('render', this.ajustBarsWidth.bind(this));
    this.getModel('balance').addListener('dataExpensesChange', this.updateBalance.bind(this));
    this.getModel('balance').addListener('dataResourcesChange', this.updateBalance.bind(this));
    this.getModel('balance').addListener('dataAvailableChange', this.updateBalance.bind(this));
    this.getModel('balance').addListener('dataChange', this.updateBalance.bind(this));
    return this;
  };

  Balance.prototype.bindElements = function() {
    this.set('$resources', this.queryEl('.bar-balance-resources'));
    this.set('$expenses', this.queryEl('.bar-balance-expenses'));
    return this;
  };

  Balance.prototype.updateBalance = function() {
    this.recalculateModel();
    this.partialRender('.bar-balance-resources');
    this.partialRender('.bar-balance-expenses');
    this.partialRender('.bar-balance-current');
    this.ajustBarsWidth();
    return this;
  };

  Balance.prototype.ajustBarsWidth = function() {
    var expenses, expensesLeft, expensesWidth, resources, resourcesLeft, resourcesWidth;
    expenses = Math.abs(this.getModel('balance').$get('expenses'));
    resources = this.getModel('balance').$get('resources');
    if (expenses === 0 && resources === 0) {
      expensesWidth = 0;
      resourcesWidth = 100;
      expensesLeft = 0;
      resourcesLeft = 0;
    } else if (expenses >= resources) {
      expensesWidth = 100;
      resourcesWidth = 0;
      expensesLeft = 0;
      resourcesLeft = 0;
    } else {
      expensesWidth = expenses === 0 ? 0 : parseInt(expenses / (resources / 100));
      resourcesWidth = 100 - expensesWidth;
      expensesLeft = 0;
      resourcesLeft = expensesWidth;
    }
    this.get('$resources').style.width = resourcesWidth + "%";
    this.get('$resources').style.left = resourcesLeft + "%";
    this.get('$expenses').style.width = expensesWidth + "%";
    this.get('$expenses').style.left = expensesLeft + "%";
    return this;
  };

  Balance.prototype.recalculateModel = function() {};

  app.views.BarBalance = Balance;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Balance.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Button, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Button = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  app.views.Button = Button;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Button.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Chart, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Chart = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  Chart.prototype.init = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.prototype.init.apply(this, all);
    return this.bindEvents();
  };

  Chart.prototype.initConfig = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    config.models = {
      chart: app.models.chart
    };
    yamvc.View.prototype.initConfig.apply(this, all);
    return this.bindModelEvents();
  };

  Chart.prototype.bindEvents = function() {
    return this.addListener('render', this.initChart.bind(this));
  };

  Chart.prototype.bindModelEvents = function() {
    return this.getModel('chart').addListener('dataDataChange', this.redrawChart.bind(this));
  };

  Chart.prototype.redrawChart = function() {
    return this.get('chart').draw(google.visualization.arrayToDataTable(this.getModel('chart').$get('data')), {
      title: this.getModel('chart').$get('title'),
      width: this.queryEl('.chart-container').offsetWidth,
      height: this.queryEl('.chart-container').offsetHeight,
      vAxis: {
        title: this.getModel('chart').$get('titlevAxis')
      },
      hAxis: {
        title: this.getModel('chart').$get('titlehAxis')
      }
    });
  };

  Chart.prototype.initChart = function() {
    var chart;
    chart = new google.visualization[this.getModel('chart').$get('type')](this.queryEl('.chart-container'));
    chart.draw(google.visualization.arrayToDataTable(this.getModel('chart').$get('data')), {
      title: this.getModel('chart').$get('title'),
      width: this.queryEl('.chart-container').offsetWidth,
      height: this.queryEl('.chart-container').offsetHeight,
      vAxis: {
        title: this.getModel('chart').$get('titlevAxis')
      },
      hAxis: {
        title: this.getModel('chart').$get('titlehAxis')
      }
    });
    this.set('chart', chart);
    return this.getModel('chart').load();
  };

  app.views.Chart = Chart;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Chart.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Form, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Form = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    this.bindEvents();
    return this;
  });

  Form.prototype.bindEvents = function() {
    this.addListener('render', this.resize.bind(this));
    this.addListener('render', this.bindClose.bind(this));
    return this.addListener('render', this.bindDOMEvents.bind(this));
  };

  Form.prototype.initConfig = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    config.width = config.width || 400;
    config.views = config.views || {};
    config.views.close = new app.views.Button({
      config: {
        tpl: 'tpl-button',
        renderTo: '.top-bar',
        models: {
          locale: new yamvc.Model({
            config: {
              namespace: 'locale'
            },
            data: {
              text: 'X'
            }
          })
        }
      }
    });
    config = this.get('config');
    config.height = 200;
    config.views = config.views || {};
    config.views.add = new app.views.Button({
      config: {
        tpl: 'tpl-button',
        renderTo: '.bottom-bar',
        models: {
          locale: new yamvc.Model({
            config: {
              namespace: 'locale'
            },
            data: {
              text: 'Add'
            }
          })
        }
      }
    });
    return yamvc.View.prototype.initConfig.apply(this, all);
  };

  Form.prototype.bindClose = function() {
    var me;
    me = this;
    return this.queryEl('a').addEventListener('click', function(e) {
      e.preventDefault();
      me.hide();
      return this;
    }, true);
  };

  Form.prototype.bindDOMEvents = function() {
    this.queryEl('#form-name').addEventListener('keyup', this.validateName.bind(this));
    this.queryEl('#form-date').addEventListener('keyup', this.validateDate.bind(this));
    this.queryEl('#form-value').addEventListener('keyup', this.validateValue.bind(this));
    return this.queryEl('.bottom-bar a').addEventListener('click', this.processForm.bind(this), false);
  };

  Form.prototype.processForm = function() {};

  Form.prototype.validateName = function() {
    var value;
    value = this.queryEl('#form-name').value;
    if (value && value.length > 3) {
      return this.queryEl('#form-name').setAttribute('class', '');
    } else {
      return this.queryEl('#form-name').setAttribute('class', 'invalid');
    }
  };

  Form.prototype.validateDate = function() {
    var value;
    value = this.queryEl('#form-date').value;
    if (app.logic.Date.parse(value)) {
      return this.queryEl('#form-date').setAttribute('class', '');
    } else {
      return this.queryEl('#form-date').setAttribute('class', 'invalid');
    }
  };

  Form.prototype.validateValue = function() {
    var test, value;
    value = this.queryEl('#form-value').value;
    test = /^\s*(\+|-)?((\d+(\.\d+)?)|(\.\d+))\s*$/;
    if (test.test(value)) {
      return this.queryEl('#form-value').setAttribute('class', '');
    } else {
      return this.queryEl('#form-value').setAttribute('class', 'invalid');
    }
  };

  Form.prototype.resize = function() {
    var style;
    style = this.queryEl('.window-vertical-center').style;
    return style.width = this.getWidth() + 'px';
  };

  Form.prototype.show = function() {
    var all, style;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.prototype.show.apply(this, all);
    style = this.get('el').style;
    return style.display = 'table';
  };

  app.views.Form = Form;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Form.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var AddExpense, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  app.views.form = app.views.form || {};

  yamvc = window.yamvc;

  AddExpense = app.views.Form.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    app.views.Form.apply(this, all);
    return this;
  });

  AddExpense.prototype.initConfig = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    config.models = {
      locale: new yamvc.Model({
        config: {
          namespace: 'locale'
        },
        data: {
          name: 'Name',
          date: 'Date',
          value: 'Value',
          exName: 'e.g Book',
          exDate: 'e.g 23/9/2013',
          exValue: 'e.g 25.50'
        }
      }),
      expense: new app.models.Expense({
        config: {
          namespace: 'expenses',
          proxy: new app.data.proxy.YdnDb({
            config: {
              db: app.data.db
            }
          })
        }
      })
    };
    app.views.Form.prototype.initConfig.apply(this, all);
    return this.bindModelEvents();
  };

  AddExpense.prototype.bindEvents = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    app.views.Form.prototype.bindEvents.apply(this, all);
    return this.addListener('render', this.addClass.bind(this));
  };

  AddExpense.prototype.bindModelEvents = function() {
    return this.getModel('expense').addListener('saved', this.afterModelSave.bind(this));
  };

  AddExpense.prototype.processForm = function(e) {
    var i, inputs, l, results, test;
    e.preventDefault();
    test = [];
    inputs = this.queryEls('form input');
    this.validateName();
    this.validateDate();
    this.validateValue();
    results = {};
    i = 0;
    l = inputs.length;
    while (i < l) {
      if (inputs[i].getAttribute('class').search(/invalid/) > -1) {
        test.push(1);
      }
      results[inputs[i].name] = inputs[i].value;
      i++;
    }
    if (test.length === 0) {
      results['date'] = +new Date(app.logic.Date.parse(results['date']));
      this.getModel('expense').setData(results);
      app.mask.show();
      this.getModel('expense').save();
    }
    return this;
  };

  AddExpense.prototype.afterModelSave = function() {
    this.queryEl('form').reset();
    app.mask.hide();
    app.models.balance.load();
    app.models.chart.load();
    return this.hide();
  };

  AddExpense.prototype.addClass = function() {
    var form;
    form = this.queryEl('form');
    form.setAttribute('class', 'add-expenses');
    return form.setAttribute('data-type', 'add-expenses');
  };

  app.views.form.AddExpense = AddExpense;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=AddExpense.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var AddIncome, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  app.views.form = app.views.form || {};

  yamvc = window.yamvc;

  AddIncome = app.views.Form.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    app.views.Form.apply(this, all);
    return this;
  });

  AddIncome.prototype.initConfig = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    config.models = {
      locale: new yamvc.Model({
        config: {
          namespace: 'locale'
        },
        data: {
          name: 'Name',
          date: 'Date',
          value: 'Value',
          exName: 'e.g Salary',
          exDate: 'e.g 23/3/2013',
          exValue: 'e.g 2005.55'
        }
      }),
      income: new app.models.Income({
        config: {
          namespace: 'incomes',
          proxy: new app.data.proxy.YdnDb({
            config: {
              db: app.data.db
            }
          })
        }
      })
    };
    app.views.Form.prototype.initConfig.apply(this, all);
    return this.bindModelEvents();
  };

  AddIncome.prototype.bindEvents = function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    app.views.Form.prototype.bindEvents.apply(this, all);
    return this.addListener('render', this.addClass.bind(this));
  };

  AddIncome.prototype.bindModelEvents = function() {
    return this.getModel('income').addListener('saved', this.afterModelSave.bind(this));
  };

  AddIncome.prototype.processForm = function(e) {
    var i, inputs, l, results, test;
    e.preventDefault();
    test = [];
    inputs = this.queryEls('form input');
    this.validateName();
    this.validateDate();
    this.validateValue();
    results = {};
    i = 0;
    l = inputs.length;
    while (i < l) {
      if (inputs[i].getAttribute('class').search(/invalid/) > -1) {
        test.push(1);
      }
      results[inputs[i].name] = inputs[i].value;
      i++;
    }
    if (test.length === 0) {
      results['date'] = +new Date(app.logic.Date.parse(results['date']));
      this.getModel('income').setData(results);
      app.mask.show();
      this.getModel('income').save();
    }
    return this;
  };

  AddIncome.prototype.afterModelSave = function() {
    this.queryEl('form').reset();
    app.mask.hide();
    app.models.balance.load();
    app.models.chart.load();
    return this.hide();
  };

  AddIncome.prototype.addClass = function() {
    var form;
    form = this.queryEl('form');
    form.setAttribute('class', 'add-income');
    return form.setAttribute('data-type', 'add-income');
  };

  app.views.form.AddIncome = AddIncome;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=AddIncome.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Layout, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Layout = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  Layout.prototype.init = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.prototype.init.apply(this, all);
    config = this.get('config');
    return config.views = {
      barBalance: new app.views.BarBalance({
        config: {
          id: 'current-balance',
          tpl: 'tpl-bar-balance',
          renderTo: '.balance-container',
          models: {
            locale: new yamvc.Model({
              config: {
                namespace: 'locale'
              },
              data: {
                legend: 'Legend',
                expenses: 'monthly expenses',
                resources: 'monthly resources',
                currentBalance: 'Current balance'
              }
            }),
            balance: app.models.balance
          }
        }
      }),
      barActions: new app.views.Bar({
        config: {
          id: 'action-bar',
          tpl: 'tpl-bar-action',
          renderTo: '.layout-action-bar'
        }
      }),
      menu: new app.views.Menu({
        config: {
          id: 'menu',
          tpl: 'tpl-menu',
          renderTo: '.menu'
        }
      }),
      chart: new app.views.Chart({
        config: {
          id: 'dailyChart',
          tpl: 'tpl-chart',
          renderTo: '.container'
        }
      })
    };
  };

  app.views.Layout = Layout;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Layout.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Layout2, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Layout2 = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  Layout2.prototype.init = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.prototype.init.apply(this, all);
    config = this.get('config');
    return config.views = {
      incomes: new app.views.Table({
        config: {
          id: 'table-incomes',
          tpl: 'tpl-table',
          renderTo: '.container',
          models: {
            data: new app.models.Table({
              config: {
                namespace: 'incomes'
              }
            })
          },
          headers: [
            {
              text: 'Id',
              dataIndex: 'id'
            }, {
              text: 'Name',
              dataIndex: 'name'
            }, {
              text: 'Value',
              dataIndex: 'value'
            }, {
              text: 'Date',
              dataIndex: 'date',
              convert: function(value) {
                var d, day, month, year;
                d = new Date(value);
                day = d.getDate();
                month = d.getMonth() + 1;
                year = d.getFullYear();
                return day + '/' + month + '/' + year;
              }
            }
          ]
        }
      }),
      expenses: new app.views.Table({
        config: {
          id: 'table-expenses',
          tpl: 'tpl-table',
          renderTo: '.container',
          models: {
            data: new app.models.Table({
              config: {
                namespace: 'expenses'
              }
            })
          },
          headers: [
            {
              text: 'Id',
              dataIndex: 'id'
            }, {
              text: 'Name',
              dataIndex: 'name'
            }, {
              text: 'Value',
              dataIndex: 'value'
            }, {
              text: 'Date',
              dataIndex: 'date',
              convert: function(value) {
                var d, day, month, year;
                d = new Date(value);
                day = d.getDate();
                month = d.getMonth() + 1;
                year = d.getFullYear();
                return day + '/' + month + '/' + year;
              }
            }
          ]
        }
      }),
      buttonBack: new app.views.Button({
        config: {
          tpl: 'tpl-button',
          renderTo: '.layout-2-action-bar',
          models: {
            locale: new yamvc.Model({
              config: {
                namespace: 'locale'
              },
              data: {
                text: 'Back'
              }
            })
          }
        }
      })
    };
  };

  app.views.Layout2 = Layout2;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Layout2.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Mask, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Mask = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  Mask.prototype.show = function() {
    var style;
    style = this.get('el').style;
    return style.display = 'table';
  };

  Mask.prototype.hide = function() {
    var style;
    style = this.get('el').style;
    return style.display = 'none';
  };

  app.views.Mask = Mask;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Mask.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Menu, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Menu = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  Menu.prototype.init = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.prototype.init.apply(this, all);
    config = this.get('config');
    return config.views = {
      buttonIncomes: new app.views.Button({
        config: {
          id: 'list-incomes',
          tpl: 'tpl-button',
          renderTo: '.menu-action',
          models: {
            locale: new yamvc.Model({
              config: {
                namespace: 'locale'
              },
              data: {
                text: 'List all incomes'
              }
            })
          }
        }
      }),
      buttonExpenses: new app.views.Button({
        config: {
          id: 'list-expenses',
          tpl: 'tpl-button',
          renderTo: '.menu-action',
          models: {
            locale: new yamvc.Model({
              config: {
                namespace: 'locale'
              },
              data: {
                text: 'List all expenses'
              }
            })
          }
        }
      })
    };
  };

  app.views.Menu = Menu;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Menu.map
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var Table, app, yamvc,
    __slice = [].slice;

  app = window.app || {};

  app.views = app.views || {};

  yamvc = window.yamvc;

  Table = yamvc.View.extend(function() {
    var all;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.apply(this, all);
    return this;
  });

  Table.prototype.init = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    yamvc.View.prototype.init.apply(this, all);
    config = this.get('config');
    return this.bindEvents();
  };

  Table.prototype.initConfig = function() {
    var all, config;
    all = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    config = this.get('config');
    if (!config.headers || config.headers && config.headers.length < 1) {
      throw new Error('At least one header should be set for table');
    }
    yamvc.View.prototype.initConfig.apply(this, all);
    return this.bindModelEvents();
  };

  Table.prototype.bindEvents = function() {
    return this.addListener('render', this.initTable.bind(this));
  };

  Table.prototype.bindModelEvents = function() {
    return this.getModel('data').addListener('dataDataChange', this.redrawTable.bind(this));
  };

  Table.prototype.initTable = function() {
    this.getModel('data').load();
    return this.generateHeaders();
  };

  Table.prototype.generateHeaders = function() {
    var header, namespace, thead, tr, _i, _len, _ref;
    namespace = this.getModel('data').getNamespace();
    thead = this.queryEl('thead');
    tr = document.createElement('tr');
    tr.setAttribute('class', namespace + '-tr');
    _ref = this.getHeaders();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      header = _ref[_i];
      this.generateHeader(tr, namespace, header);
    }
    return thead.appendChild(tr);
  };

  Table.prototype.generateHeader = function(tr, namespace, header) {
    var td;
    td = document.createElement('td');
    td.setAttribute('class', namespace + '-td');
    td.innerHTML = header.text;
    return tr.appendChild(td);
  };

  Table.prototype.generateRows = function() {
    var headers, namespace, row, tbody, _i, _len, _ref, _results;
    namespace = this.getModel('data').getNamespace();
    headers = this.getHeaders();
    tbody = this.queryEl('tbody');
    _ref = this.getModel('data').$get('data');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      row = _ref[_i];
      _results.push(this.generateRow(tbody, namespace, headers, row));
    }
    return _results;
  };

  Table.prototype.generateRow = function(tbody, namespace, headers, row) {
    var a, cell, tr;
    tr = document.createElement('tr');
    tr.setAttribute('class', namespace + '-tr');
    for (a in headers) {
      cell = headers[a];
      this.generateCell(tr, namespace, (cell.convert ? cell.convert(row[cell.dataIndex]) : row[cell.dataIndex]));
    }
    return tbody.appendChild(tr);
  };

  Table.prototype.generateCell = function(tr, namespace, cell) {
    var td;
    td = document.createElement('td');
    td.setAttribute('class', namespace + '-td');
    td.innerHTML = cell;
    return tr.appendChild(td);
  };

  Table.prototype.redrawTable = function() {
    var tbody;
    tbody = this.queryEl('tbody');
    tbody.innerHTML = '';
    return this.generateRows();
  };

  app.views.Table = Table;

  window.app = app;

}).call(this);

/*
//@ sourceMappingURL=Table.map
*/
